<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:hz="http://www.hazelcast.com/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.5.xsd">

	<!--import resource="classpath:spring/xml-context.xml" /-->
 
	<!-- Beans Declaration -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:/${xdm.config.properties.file}" />
	<context:annotation-config />
 
	<hz:hazelcast id="hzInstance">
		<hz:config>
			<hz:spring-aware/>
			<hz:instance-name>${xdm.schema.name}</hz:instance-name>
			<hz:group name="${xdm.schema.name}" password="${xdm.schema.password}"/>
			<hz:properties>
				<hz:property name="hazelcast.jmx">true</hz:property>
				<hz:property name="hazelcast.jmx.detailed">true</hz:property>
				<hz:property name="hazelcast.logging.type">slf4j</hz:property>
				<hz:property name="hazelcast.rest.enabled">false</hz:property>
				<hz:property name="hazelcast.memcache.enabled">false</hz:property>
				<hz:property name="hazelcast.partition.count">${xdm.schema.partition.count}</hz:property>
				<hz:property name="hazelcast.socket.send.buffer.size">${xdm.schema.buffer.size}</hz:property>
				<hz:property name="hazelcast.socket.receive.buffer.size">${xdm.schema.buffer.size}</hz:property>
				<!--hz:property name="hazelcast.operation.thread.count">271</hz:property-->
				<!--hz:property name="hazelcast.initial.min.cluster.size">${xdm.schema.population.size}</hz:property-->
			</hz:properties>
			<hz:network port="${xdm.schema.ports.first}" port-auto-increment="true">
				<hz:outbound-ports>
					<hz:ports>${xdm.schema.ports.first}-${xdm.schema.ports.last}</hz:ports> 
				</hz:outbound-ports>
				<hz:join>
					<hz:multicast enabled="false" />
					<hz:tcp-ip enabled="true" connection-timeout-seconds="10">
						<hz:members>${xdm.schema.members}</hz:members>
					</hz:tcp-ip>
				</hz:join>
			</hz:network>

			<hz:executor-service name="xdm-exec-pool" pool-size="${xdm.schema.thread.pool}" />
			<hz:executor-service name="hz:async" pool-size="${xdm.schema.thread.pool}" />
			<hz:executor-service name="hz:query" pool-size="${xdm.schema.thread.pool}" />
			
			<hz:queue name="client:*" backup-count="1" />
			
			<hz:map name="dict-namespace" in-memory-format="OBJECT"  async-backup-count="${xdm.schema.dict.backup.async}" 
				backup-count="${xdm.schema.dict.backup.sync}" read-backup-data="${xdm.schema.dict.backup.read}">
				<hz:near-cache time-to-live-seconds="0" max-idle-seconds="0" eviction-policy="LRU" 
					max-size="0" invalidate-on-change="true" in-memory-format="OBJECT"/>
			</hz:map>
			<hz:map name="dict-path" in-memory-format="OBJECT" async-backup-count="${xdm.schema.dict.backup.async}" 
				backup-count="${xdm.schema.dict.backup.sync}" read-backup-data="${xdm.schema.dict.backup.read}">
				<hz:near-cache time-to-live-seconds="0" max-idle-seconds="0" eviction-policy="LRU" 
					max-size="0" invalidate-on-change="true" in-memory-format="OBJECT"/>
				<hz:indexes>
					<hz:index attribute="typeId"/>
					<hz:index attribute="pathId" ordered="true"/>
				</hz:indexes>
			</hz:map>
			<hz:map name="dict-index" in-memory-format="OBJECT" async-backup-count="${xdm.schema.dict.backup.async}" 
				backup-count="${xdm.schema.dict.backup.sync}" read-backup-data="${xdm.schema.dict.backup.read}">
				<hz:near-cache time-to-live-seconds="0" max-idle-seconds="0" eviction-policy="LRU" 
					max-size="0" invalidate-on-change="true" in-memory-format="OBJECT"/>
			</hz:map>
			<hz:map name="dict-document-type" in-memory-format="OBJECT" async-backup-count="${xdm.schema.dict.backup.async}" 
				backup-count="${xdm.schema.dict.backup.sync}" read-backup-data="${xdm.schema.dict.backup.read}">
				<!--hz:map-store enabled="true" write-delay-seconds="10" factory-implementation="xdmStoreFactory">
					<hz:properties>
						<hz:property name="xdm.schema.name">${xdm.schema.name}</hz:property>
						<hz:property name="xdm.schema.store.type">${xdm.schema.store.type}</hz:property>
					</hz:properties>
				</hz:map-store-->
				<hz:near-cache time-to-live-seconds="0" max-idle-seconds="0" eviction-policy="LRU" 
					max-size="0" invalidate-on-change="true" in-memory-format="OBJECT"/>
			</hz:map>
			<hz:map name="dict-module" in-memory-format="OBJECT" async-backup-count="${xdm.schema.dict.backup.async}" 
				backup-count="${xdm.schema.dict.backup.sync}" read-backup-data="${xdm.schema.dict.backup.read}">
				<hz:near-cache time-to-live-seconds="0" max-idle-seconds="0" eviction-policy="LRU" 
					max-size="0" invalidate-on-change="true" in-memory-format="OBJECT"/>
			</hz:map>
			
			<hz:map name="xdm-document" in-memory-format="OBJECT" async-backup-count="${xdm.schema.data.backup.async}" 
				backup-count="${xdm.schema.data.backup.sync}" read-backup-data="${xdm.schema.data.backup.read}">
				<hz:map-store enabled="${xdm.schema.store.enabled}" write-delay-seconds="10" factory-implementation="xdmStoreFactory">
					<hz:properties>
						<hz:property name="xdm.schema.name">${xdm.schema.name}</hz:property>
						<hz:property name="xdm.schema.store.type">${xdm.schema.store.type}</hz:property>
					</hz:properties>
				</hz:map-store>
				<hz:indexes>
					<hz:index attribute="txFinish"/>
					<hz:index attribute="typeId"/>
					<hz:index attribute="uri"/>
				</hz:indexes>
			</hz:map>
			<hz:map name="xdm-element" in-memory-format="OBJECT" async-backup-count="${xdm.schema.data.backup.async}" 
				backup-count="${xdm.schema.data.backup.sync}" read-backup-data="${xdm.schema.data.backup.read}">
				<!--hz:map-store enabled="true" write-delay-seconds="10" factory-implementation="xdmStoreFactory">
					<hz:properties>
						<hz:property name="xdm.schema.name">${xdm.schema.name}</hz:property>
						<hz:property name="xdm.schema.store.type">${xdm.schema.store.type}</hz:property>
					</hz:properties>
				</hz:map-store-->
				<hz:indexes>
					<!--hz:index attribute="documentId"/-->
					<hz:index attribute="pathId" ordered="true"/>
					<!--hz:index attribute="value"/-->
				</hz:indexes>
			</hz:map>
			<hz:map name="xdm-index" in-memory-format="OBJECT" async-backup-count="${xdm.schema.data.backup.async}" 
				backup-count="${xdm.schema.data.backup.sync}" read-backup-data="${xdm.schema.data.backup.read}">
				<!-- think about store indexes persistently... but not necessarily
				<hz:map-store enabled="true" write-delay-seconds="10" factory-implementation="xdmStoreFactory">
					<hz:properties>
						<hz:property name="xdm.schema.name">${xdm.schema.name}</hz:property>
						<hz:property name="xdm.schema.store.type">${xdm.schema.store.type}</hz:property>
					</hz:properties>
				</hz:map-store-->
			</hz:map>

			<hz:map name="xdm-transaction" in-memory-format="BINARY" async-backup-count="${xdm.schema.trans.backup.async}" 
				backup-count="${xdm.schema.trans.backup.sync}" read-backup-data="${xdm.schema.trans.backup.read}">
				<!-- mast persist transaction log... 
				<hz:map-store enabled="true" write-delay-seconds="10" factory-implementation="xdmStoreFactory">
					<hz:properties>
						<hz:property name="xdm.schema.name">${xdm.schema.name}</hz:property>
						<hz:property name="xdm.schema.store.type">${xdm.schema.store.type}</hz:property>
					</hz:properties>
				</hz:map-store-->
				<hz:indexes>
					<hz:index attribute="txState"/>
				</hz:indexes>
			</hz:map>

			<hz:map name="xdm-xml" in-memory-format="OBJECT" async-backup-count="${xdm.schema.query.backup.async}" 
					 backup-count="${xdm.schema.query.backup.sync}" read-backup-data="${xdm.schema.query.backup.read}"
					 eviction-policy="LRU" time-to-live-seconds="0" max-size-policy="USED_HEAP_PERCENTAGE" 
					 max-size="25" eviction-percentage="10">
			</hz:map>
			<hz:map name="xdm-query" in-memory-format="OBJECT" async-backup-count="${xdm.schema.query.backup.async}" 
					 backup-count="${xdm.schema.query.backup.sync}" read-backup-data="${xdm.schema.query.backup.read}"
					 eviction-policy="LRU" time-to-live-seconds="0" max-size-policy="USED_HEAP_PERCENTAGE" 
					 max-size="15" eviction-percentage="10">
			</hz:map>
			<hz:map name="xdm-result" in-memory-format="OBJECT" async-backup-count="${xdm.schema.query.backup.async}" 
					 backup-count="${xdm.schema.query.backup.sync}" read-backup-data="${xdm.schema.query.backup.read}"
					 eviction-policy="LRU" time-to-live-seconds="0" max-size-policy="USED_HEAP_PERCENTAGE" 
					 max-size="10" eviction-percentage="10">
			</hz:map>
			
			<hz:serialization>
				<hz:data-serializable-factories>
					<hz:data-serializable-factory factory-id="1" class-name="com.bagri.xdm.cache.hazelcast.serialize.XDMDataSerializationFactory"/>
				</hz:data-serializable-factories>
				<hz:portable-factories>
					<hz:portable-factory factory-id="2" class-name="com.bagri.xdm.cache.hazelcast.serialize.XDMPortableFactory"/>
				</hz:portable-factories>
				<hz:serializers>
					<!--hz:global-serializer class-name="com.hazelcast.nio.serialization.PortableSerializer"/-->
					<hz:serializer type-class="com.bagri.common.query.Expression" class-name="com.bagri.xdm.client.hazelcast.serialize.ExpressionSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.PathExpression" class-name="com.bagri.xdm.client.hazelcast.serialize.ExpressionSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.BinaryExpression" class-name="com.bagri.xdm.client.hazelcast.serialize.ExpressionSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.ExpressionBuilder" class-name="com.bagri.xdm.client.hazelcast.serialize.ExpressionBuilderSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.PathBuilder" class-name="com.bagri.xdm.client.hazelcast.serialize.PathBuilderSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.ExpressionContainer" class-name="com.bagri.xdm.client.hazelcast.serialize.ExpressionContainerSerializer"/>
					<hz:serializer type-class="com.bagri.common.query.QueryBuilder" class-name="com.bagri.xdm.client.hazelcast.serialize.QueryBuilderSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMElement" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMElementSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMElements" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMElementsSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMPath" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMPathSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMDocument" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMDocumentSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMDocumentType" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMDocumentTypeSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMNamespace" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMNamespaceSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMQuery" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMQuerySerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMResults" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMResultsSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMIndexedValue" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMIndexedValueSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.domain.XDMTransaction" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMTransactionSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.system.XDMIndex" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMIndexSerializer"/>
					<hz:serializer type-class="com.bagri.xdm.system.XDMModule" class-name="com.bagri.xdm.client.hazelcast.serialize.XDMModuleSerializer"/>
					<hz:serializer type-class="javax.xml.xquery.XQItemType" implementation="xqItemTypeSerializer"/>
					<hz:serializer type-class="javax.xml.xquery.XQItem" implementation="xqItemSerializer"/>
					<hz:serializer type-class="javax.xml.xquery.XQSequence" implementation="xqSequenceSerializer"/>
				</hz:serializers>
			</hz:serialization>

			<!--hz:security enabled="true">
				<hz:client-login-modules>
					<hz:login-module class-name="com.bagri.xdm.cache.hazelcast.security.BagriLoginModule" usage="REQUIRED">
						<hz:properties>
							<hz:property name="property3">value3</hz:property>
						</hz:properties>
					</hz:login-module>
				</hz:client-login-modules>
			</hz:security-->
		</hz:config>
	</hz:hazelcast>

	<hz:map id="xdm-xml" name="xdm-xml" instance-ref="hzInstance" />
	<hz:map id="xdm-query" name="xdm-query" instance-ref="hzInstance" />
	<hz:map id="xdm-result" name="xdm-result" instance-ref="hzInstance" />
	<hz:map id="xdm-document" name="xdm-document" instance-ref="hzInstance" />
	<hz:map id="xdm-element" name="xdm-element" instance-ref="hzInstance" />
	<hz:map id="xdm-index" name="xdm-index" instance-ref="hzInstance" />
	<hz:map id="xdm-transaction" name="xdm-transaction" instance-ref="hzInstance" />
	<hz:map id="dict-document-type" name="dict-document-type" instance-ref="hzInstance" />
	<hz:map id="dict-path" name="dict-path" instance-ref="hzInstance" />
	<hz:map id="dict-namespace" name="dict-namespace" instance-ref="hzInstance" />
	<hz:map id="dict-index" name="dict-index" instance-ref="hzInstance" />
	<hz:map id="dict-module" name="dict-module" instance-ref="hzInstance" />

	<hz:atomicLong id="xdm.document" name="xdm.document" instance-ref="hzInstance"/>
	<!--hz:atomicLong id="xdm.element" name="xdm.element" instance-ref="hzInstance"/-->
	<hz:atomicLong id="xdm.path" name="xdm.path" instance-ref="hzInstance"/>
	<hz:atomicLong id="xdm.namespace" name="xdm.namespace" instance-ref="hzInstance"/>
	<hz:atomicLong id="xdm.doctype" name="xdm.doctype" instance-ref="hzInstance"/>
	<hz:atomicLong id="xdm.transaction" name="xdm.transaction" instance-ref="hzInstance"/>
	
	<hz:executorService id="xdm-exec-pool" name="xdm-exec-pool" instance-ref="hzInstance"/>
	
	<bean id="xdmFactory" class="com.bagri.xdm.cache.hazelcast.impl.XDMFactoryImpl"/>

	<bean id="xdmStoreFactory" class="com.bagri.xdm.cache.hazelcast.store.XDMMapStoreFactory"/>

	<bean id="docGen" class="com.bagri.xdm.client.hazelcast.impl.IdGeneratorImpl">
		<constructor-arg ref="xdm.document" />
	</bean>

	<bean id="mTicker" class="com.bagri.common.stats.watch.MillisTicker"/>
	<bean id="nTicker" class="com.bagri.common.stats.watch.NanosTicker"/>

	<bean id="docQueue" class="java.util.concurrent.ArrayBlockingQueue">
		<constructor-arg value="1024" />
	</bean>
	<bean id="docStats" class="com.bagri.common.stats.InvocationStatistics">
		<constructor-arg value="docs" />
		<property name="statsQueue" ref="docQueue"/>
	</bean>

	<bean id="queryQueue" class="java.util.concurrent.ArrayBlockingQueue">
		<constructor-arg value="1024" />
	</bean>
	<bean id="queryStats" class="com.bagri.common.stats.InvocationStatistics">
		<constructor-arg value="query" />
		<property name="statsQueue" ref="queryQueue"/>
	</bean>
	
	<bean id="indexQueue" class="java.util.concurrent.ArrayBlockingQueue">
		<constructor-arg value="1024" />
	</bean>
	<bean id="indexStats" class="com.bagri.common.stats.UsageStatistics">
		<constructor-arg value="index" />
		<property name="statsQueue" ref="indexQueue"/>
	</bean>

	<bean id="popManager" class="com.bagri.xdm.cache.hazelcast.management.PopulationManager">
		<constructor-arg ref="hzInstance" />
		<property name="schemaName" value="${xdm.schema.name}"/>
		<property name="populationSize" value="${xdm.schema.population.size}"/>
	</bean>

	<bean id="xqItemTypeSerializer" class="com.bagri.xdm.client.hazelcast.serialize.XQItemTypeSerializer">
   		<property name="XQDataFactory" ref="xqFactory" />
	</bean>

	<bean id="xqItemSerializer" class="com.bagri.xdm.client.hazelcast.serialize.XQItemSerializer">
    		<property name="XQDataFactory" ref="xqFactory" />
	</bean>
	
	<bean id="xqSequenceSerializer" class="com.bagri.xdm.client.hazelcast.serialize.XQSequenceSerializer">
    		<property name="XQDataFactory" ref="xqFactory" />
	</bean>
    
	<bean id="mdlManager" class="com.bagri.xdm.client.hazelcast.impl.ModelManagementImpl">
		<property name="namespaceCache" ref="dict-namespace"/>
		<property name="pathCache" ref="dict-path"/>
		<property name="typeCache" ref="dict-document-type"/>
		<property name="namespaceGen" ref="xdm.namespace"/>
		<property name="pathGen" ref="xdm.path"/>
		<property name="typeGen" ref="xdm.doctype"/>
	</bean>

	<bean id="idxManager" class="com.bagri.xdm.cache.hazelcast.impl.IndexManagementImpl">
		<property name="xdmFactory" ref="xdmFactory"/>
		<property name="execService" ref="xdm-exec-pool"/>
		<property name="indexDictionary" ref="dict-index"/>
		<property name="indexCache" ref="xdm-index"/>
		<property name="modelManager" ref="mdlManager"/>
		<property name="statsQueue" ref="indexQueue"/>
	</bean>

	<bean id="docManager" class="com.bagri.xdm.cache.hazelcast.impl.DocumentManagementImpl">
		<property name="documentIdGenerator" ref="docGen"/>
		<property name="hzInstance" ref="hzInstance"/>
		<property name="xdmFactory" ref="xdmFactory"/>
		<property name="xddCache" ref="xdm-document"/>
		<property name="xdmCache" ref="xdm-element"/>
		<property name="xmlCache" ref="xdm-xml"/>
		<property name="modelManager" ref="mdlManager"/>
		<property name="indexManager" ref="idxManager"/>
		<!--property name="txManager" ref="txManager"/-->
   		<!--property name="repository" ref="xdmRepo" /-->
	</bean>

	<bean id="txManager" class="com.bagri.xdm.cache.hazelcast.impl.TransactionManagementImpl">
		<property name="hzInstance" ref="hzInstance"/>
	</bean>
	
	<bean id="accManager" class="com.bagri.xdm.cache.hazelcast.impl.AccessManagementImpl">
		<property name="schemaName" value="${xdm.schema.name}"/>
		<property name="schemaPass" value="${xdm.schema.password}"/>
	</bean>

	<bean id="queryManager" class="com.bagri.xdm.cache.hazelcast.impl.QueryManagementImpl">
		<property name="queryCache" ref="xdm-query"/>
		<property name="resultCache" ref="xdm-result"/>
		<!--property name="xddCache" ref="xdm-document"/>
		<property name="xdmCache" ref="xdm-element"/>
		<property name="idxCache" ref="xdm-index"/-->
   		<property name="repository" ref="xdmRepo" />
   		<property name="indexManager" ref="idxManager" />
	</bean>

	<bean id="xdmRepo" class="com.bagri.xdm.cache.hazelcast.impl.RepositoryImpl">
		<property name="hzInstance" ref="hzInstance"/>
		<property name="modelManagement" ref="mdlManager"/>
		<property name="queryManagement" ref="queryManager"/>
		<property name="documentManagement" ref="docManager"/>
   		<property name="indexManagement" ref="idxManager" />
   		<property name="txManagement" ref="txManager" />
	</bean>
	
</beans>
